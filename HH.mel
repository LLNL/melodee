/*
 * <license>
 * Copyright (c) 2016-2017, Lawrence Livermore National Security,
 * LLC. Produced at the Lawrence Livermore National Laboratory. Written
 * by Robert Blake <blake14@llnl.gov>.
 *
 * LLNL-CODE-720003.
 * All rights reserved.
 *
 * This file is part of MELODEE. For details, see
 * http://github.com/llnl/melodee.
 *
 * Licensed under the Apache License, Version 2.0 (the "Licensee"); you
 * may not use this file except in compliance with the License.  You may
 * obtain a copy of the License at:
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the license.
 * </license> 
 */

integrate time {ms};

shared V {mV};
shared Iion {uA/uF};
shared V_init {mV};

shared E_Na {mV};
subsystem HH {

   shared Iion_area {uA/cm^2};
   provides E_R {mV} = -75;
   provides E_Na {mV} = (E_R+115{mV});
   subsystem leakage_current {
      E_L {mV} = (E_R+10.613{mV});
      @param g_L {mS/cm^2} = 0.3;
      i_L {uA/cm^2} = g_L*(V-E_L);
      provides accum Iion_area += i_L;
   }
   subsystem potassium_channel {
      shared n {1};
      subsystem potassium_channel_n_gate {
         provides diffvar n {1};
         alpha_n {1/ms} = -0.01{1/mV/ms}*(V+65{mV})/(exp(-(V+65{mV})/10{mV})-1{1});
         beta_n {1/ms} = 0.125{1/ms}*exp((V+75{mV})/80{mV});
         n.init = 0.325;
         n.diff = (alpha_n*(1-n)-beta_n*n);
      }
      E_K {mV} = (E_R-12{mV});
      g_K {mS/cm^2} = 36;
      i_K {uA/cm^2} = g_K*n^4*(V-E_K);
      provides accum Iion_area += i_K;
   }
   subsystem sodium_channel {
      shared h {1};
      shared m {1};
      subsystem sodium_channel_h_gate {
         provides diffvar h {1};
         alpha_h {1/ms} = 0.07{1/ms}*exp(-(V+75{mV})/20{mV});
         beta_h {1/ms} = 1{1/ms}/(exp(-(V+45{mV})/10{mV})+1);
         h.init = 0.6;
         h.diff = (alpha_h*(1-h)-beta_h*h);
      }
      subsystem sodium_channel_m_gate {
         provides diffvar m {1};
         alpha_m {1/ms} = -0.1{1/mV/ms}*(V+50{mV})/(exp(-(V+50{mV})/10{mV})-1);
         beta_m {1/ms} = 4{1/ms}*exp(-(V+75{mV})/18{mV});
         m.init = 0.05;
         m.diff = (alpha_m*(1-m)-beta_m*m);
      }
      g_Na {mS/cm^2} = 120;
      i_Na {uA/cm^2} = g_Na*m^3*h*(V-E_Na);
      provides accum Iion_area += i_Na;
   }
   provides V_init = -75;
   @param Cm {uF/cm^2} = 1;
   provides accum Iion += Iion_area/Cm;
}

subsystem newINa {
  diffvar m {1};
  diffvar j {1};
  diffvar h {1};

  alpha_h = ((V < -40) ? 0.057*exp(-(V+80)/6.8) : 0);
  beta_h = ((V < -40) ? (2.7*exp(0.079*V)+310000*exp(0.3485*V)) : 0.77/0.13*(1+exp((V+10.66)/-11.1)));
  h_inf = 1/pow((1+exp((V+71.55)/7.43)),2);
  tau_h = 1/(alpha_h+beta_h);
  h.init = 0.7573;
  h.diff = (h_inf-h)/tau_h;

  alpha_j = ((V < -40) ? (-25428*exp(0.2444*V)-6.948e-6*exp(-0.04391*V))*(V+37.78)/1/(1+exp(0.311*(V+79.23))) : 0);
  beta_j = ((V < -40) ? 0.02424*exp(-0.01052*V)/(1+exp(-0.1378*(V+40.14))) : 0.6*exp(0.057*V)/(1+exp(-0.1*(V+32))));
  j_inf = 1/pow((1+exp((V+71.55)/7.43)),2);
  tau_j = 1/(alpha_j+beta_j);
  j.init = 0.7225;
  j.diff = (j_inf-j)/tau_j;

  alpha_m = 1/(1+exp((-60-V)/5));
  beta_m = (0.1/(1+exp((V+35)/5))+0.1/(1+exp((V-50)/200)));
  m_inf = 1/pow((1+exp((-56.86-V)/9.03)),2);
  tau_m = 1*alpha_m*beta_m;
  m.init = 0.00155;
  m.diff = (m_inf-m)/tau_m;

  @param g_Na {mS/cm^2} = 14.838;
  i_Na = g_Na*pow(m,3)*h*j*(V-E_Na);
  provides accum i_Natot {uA/cm^2} += i_Na;
}

subsystem modifiedModel {
  use HH - .sodium_channel;
  use newINa as INa {
    export i_Natot as Iion;
  }
}

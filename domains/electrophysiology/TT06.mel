/*
 * <license>
 * Copyright (c) 2016-2017, Lawrence Livermore National Security,
 * LLC. Produced at the Lawrence Livermore National Laboratory. Written
 * by Robert Blake <blake14@llnl.gov>.
 *
 * LLNL-CODE-720003.
 * All rights reserved.
 *
 * This file is part of MELODEE. For details, see
 * http://github.com/llnl/melodee.
 *
 * Licensed under the Apache License, Version 2.0 (the "Licensee"); you
 * may not use this file except in compliance with the License.  You may
 * obtain a copy of the License at:
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the license.
 * </license> 
 */

integrate time {ms};

shared V {mV};
shared Iion {uA/uF};
shared V_init {mV};

subsystem TT06 {

   @interp(-100,100,1e-2) V;
   provides V_init = -86.709;

   provides @flag celltype {enum(ENDO,MID,EPI)} = ENDO;

   provides Cm {uF} = 0.185;
   provides F {C/mol} = 96485.3415;
   provides R {J/K/kmol} = 8314.472;
   provides T {K} = 310;
   provides V_c {um^3} = 0.016404;

   shared Na_i {mmol/L};
   shared Na_o {mmol/L};
   shared i_Naitot {uA/uF};
   subsystem sodium_dynamics {
      provides diffvar Na_i;
      Na_i.init = 10.355;
      Na_i.diff = -1*i_Naitot/(1*V_c*F)*Cm;
      provides Na_o {mmol/L} = 140;
   }

   shared K_i {mmol/L};
   shared K_o {mmol/L};
   shared i_Kitot {uA/uF};
   subsystem potassium_dynamics {
      provides diffvar K_i;
      K_i.init = 138.4;
      K_i.diff = -1*i_Kitot/(1*V_c*F)*Cm;
      provides K_o {mmol/L} = 5.4;
   }

   shared E_K {mV};
   shared E_Na {mV};
   subsystem reversal_potentials {
      provides E_K = R*T/F*log(K_o/K_i);
      provides E_Na = R*T/F*log(Na_o/Na_i);
   }
   provides @interp(-100,100,1e-2) VEK {mV} = V - E_K;

   subsystem sodium_potassium_pump_current {
      K_mNa {mmol/L} = 40;
      K_mk {mmol/L} = 1;
      P_NaK {pA/pF} = 2.724;
      i_NaK_term = P_NaK*K_o/(K_o+K_mk)/(1+0.1245*exp(-0.1*V*F/(R*T))+0.0353*exp(-V*F/(R*T)));
      @trace i_NaK {pA/pF} = i_NaK_term*Na_i/(Na_i+K_mNa);
      provides accum i_Naitot += 3*i_NaK;
      provides accum i_Kitot -= 2*i_NaK;
   }
   subsystem fast_sodium_current {
      shared h {1};
      shared j {1};
      shared m {1};
      subsystem fast_sodium_current_h_gate {
         provides diffvar @gate h {1};
         if (V < -40) {
            alpha_h = 0.057*exp(-(V+80)/6.8);
            beta_h = (2.7*exp(0.079*V)+310000*exp(0.3485*V));
         } else {
            alpha_h = 0;
            beta_h = 0.77/(0.13*(1+exp((V+10.66)/-11.1)));
         }
         h_inf {1} = 1/(pow((1+exp((V+71.55)/7.43)),2));
         tau_h {ms} = 1/(alpha_h+beta_h);
         h.init = 0.7573;
         h.diff = (h_inf-h)/tau_h;
      }
      subsystem fast_sodium_current_j_gate {
         provides diffvar @gate j {1};
         if (V < -40) {
            alpha_j = (-25428*exp(0.2444*V)-6.948e-6*exp(-0.04391*V))*(V+37.78)/1/(1+exp(0.311*(V+79.23)));
            beta_j = 0.02424*exp(-0.01052*V)/(1+exp(-0.1378*(V+40.14)));
         } else {
            alpha_j = 0;
            beta_j = 0.6*exp(0.057*V)/(1+exp(-0.1*(V+32)));
         }
         j_inf {1} = 1/(pow((1+exp((V+71.55)/7.43)),2));
         tau_j {ms} = 1/(alpha_j+beta_j);
         j.init = 0.7225;
         j.diff = (j_inf-j)/tau_j;
      }
      subsystem fast_sodium_current_m_gate {
         provides diffvar @gate m {1};
         alpha_m {1} = 1/(1+exp((-60-V)/5));
         beta_m {1} = (0.1/(1+exp((V+35)/5))+0.1/(1+exp((V-50)/200)));
         m_inf {1} = 1/(pow((1+exp((-56.86-V)/9.03)),2));
         tau_m {ms} = 1*alpha_m*beta_m;
         m.init = 0.00155;
         m.diff = (m_inf-m)/tau_m;
      }
      @param g_Na {nS/pF} = 14.838;
      @trace i_Na {pA/pF} = g_Na*pow(m,3)*h*j*(V-E_Na);
      provides accum i_Naitot += i_Na;
   }
   subsystem inward_rectifier_potassium_current {
      alpha_K1 {1} = 0.1/(1+exp(0.06*((VEK)-200)));
      beta_K1 {1} = (3*exp(0.0002*((VEK)+100))+exp(0.1*((VEK)-10)))/(1+exp(-0.5*(VEK)));
      @param g_K1 {nS/pF} = 5.405;
      xK1_inf {1} = alpha_K1/(alpha_K1+beta_K1);
      @trace i_K1 {pA/pF} = g_K1*xK1_inf*sqrt(K_o/5.4)*(VEK);
      provides accum i_Kitot += i_K1;
   }
   subsystem potassium_pump_current {
      @param g_pK {nS/pF} = 0.0146;
      i_p_K_term = 1/(1+exp((25-V)/5.98));
      @trace i_p_K {pA/pF} = g_pK*(VEK)*i_p_K_term;
      provides accum i_Kitot += i_p_K;
   }
   subsystem rapid_time_dependent_potassium_current {
      shared Xr1 {1};
      shared Xr2 {1};
      subsystem rapid_time_dependent_potassium_current_Xr1_gate {
         provides diffvar @gate Xr1 {1};
         alpha_xr1 {1} = 450/(1+exp((-45-V)/10));
         beta_xr1 {1} = 6/(1+exp((V+30)/11.5));
         xr1_inf {1} = 1/(1+exp((-26-V)/7));
         tau_xr1 {ms} = 1*alpha_xr1*beta_xr1;
         Xr1.init = 0.00448;
         Xr1.diff = (xr1_inf-Xr1)/tau_xr1;
      }
      subsystem rapid_time_dependent_potassium_current_Xr2_gate {
         provides diffvar @gate Xr2 {1};
         alpha_xr2 {1} = 3/(1+exp((-60-V)/20));
         beta_xr2 {1} = 1.12/(1+exp((V-60)/20));
         xr2_inf {1} = 1/(1+exp((V+88)/24));
         tau_xr2 {ms} = 1*alpha_xr2*beta_xr2;
         Xr2.init = 0.476;
         Xr2.diff = (xr2_inf-Xr2)/tau_xr2;
      }
      @param g_Kr {nS/pF} = 0.153;
      @trace i_Kr {pA/pF} = g_Kr*sqrt(K_o/5.4)*Xr1*Xr2*(VEK);
      provides accum i_Kitot += i_Kr;
   }
   subsystem slow_time_dependent_potassium_current {
      shared Xs {1};
      subsystem slow_time_dependent_potassium_current_Xs_gate {
         provides diffvar @gate Xs {1};
         alpha_xs {1} = 1400/(sqrt((1+exp((5-V)/6))));
         beta_xs {1} = 1/(1+exp((V-35)/15));
         xs_inf {1} = 1/(1+exp((-5-V)/14));
         tau_xs {ms} = (1*alpha_xs*beta_xs+80);
         Xs.init = 0.0087;
         Xs.diff = (xs_inf-Xs)/tau_xs;
      }
      P_kna {1} = 0.03;
      E_Ks {mV} = R*T/F*log((K_o+P_kna*Na_o)/(K_i+P_kna*Na_i));
      @param g_Ks;
      if (celltype == MID) {
        g_Ks = 0.098;
      } else {
        g_Ks = 0.392;
      }
      @trace i_Ks {pA/pF} = g_Ks*pow(Xs,2)*(V-E_Ks);
      provides accum i_Kitot += i_Ks;

   }
   subsystem sodium_background_current {
      @param g_bna {nS/pF} = 0.00029;
      @trace i_b_Na {pA/pF} = g_bna*(V-E_Na);
      provides accum i_Naitot += i_b_Na;
   }
   subsystem transient_outward_current {
      shared r {1};
      shared s {1};
      subsystem transient_outward_current_r_gate {
         provides diffvar @gate r {1};
         r_inf {1} = 1/(1+exp((20-V)/6));
         tau_r {ms} = (9.5*exp(-pow((V+40),2)/1800)+0.8);
         r.init = 2.235e-8;
         r.diff = (r_inf-r)/tau_r;
      }
      subsystem transient_outward_current_s_gate {
         provides diffvar @gate s {1};
         if (celltype == ENDO) {
           s_inf = 1/(1+exp((V+28)/5));
           tau_s = 1000*exp(-pow(V+67,2)/1000)+8;
         } else {
           s_inf = 1/(1+exp((V+20)/5));
           tau_s = 85*exp(-pow(V+45,2)/320)+5/(1+exp((V-20)/5))+3;
         }
         s.init = 0.3212;
         s.diff = (s_inf-s)/tau_s;
      }
      @param g_to {nS/pF};
      if (celltype == ENDO) {
        g_to = 0.073;
      } else {
        g_to = 0.294;
      }
      @trace i_to {pA/pF} = g_to*r*s*(VEK);
      provides accum i_Kitot += i_to;
   }

   shared i_Caitot {uA/uF};
   subsystem calcium_dynamics {
      provides Ca_o {mmol/L} = 2;
      provides diffvar Ca_i {mmol/L};
      provides diffvar @interp(1e-7,1e-1,1e-6) Ca_ss {mmol/L};
      diffvar Ca_SR {mmol/L};
      diffvar @gate R_prime {1};
      shared i_b_Ca {uA/uF};
      shared i_p_Ca {uA/uF};
      shared i_CaL {uA/uF};
      shared i_NaCa {uA/uF};
      subsystem L_type_Ca_current {
         shared d {1};
         shared f {1};
         shared f2 {1};
         shared fCass {1};
         subsystem L_type_Ca_current_d_gate {
            provides diffvar @gate d {1};
            alpha_d {1} = (1.4/(1+exp((-35-V)/13))+0.25);
            beta_d {1} = 1.4/(1+exp((V+5)/5));
            d_inf {1} = 1/(1+exp((-8-V)/7.5));
            gamma_d {ms} = 1/(1+exp((50-V)/20));
            tau_d {ms} = (1*alpha_d*beta_d+gamma_d);
            d.init = 3.164e-5;
            d.diff = (d_inf-d)/tau_d;
         }
         subsystem L_type_Ca_current_f2_gate {
            provides diffvar @gate f2 {1};
            f2_inf {1} = (0.67/(1+exp((V+35)/7))+0.33);
            tau_f2 {ms} = (562*exp(-pow((V+27),2)/240)+31/(1+exp((25-V)/10))+80/(1+exp((V+30)/10)));
            f2.init = 0.9778;
            f2.diff = (f2_inf-f2)/tau_f2;
         }
         subsystem L_type_Ca_current_fCass_gate {
            provides diffvar @gate fCass {1};
            fCass_inf {1} = (0.6/(1+pow(Ca_ss/0.05,2))+0.4);
            tau_fCass {ms} = (80/(1+pow(Ca_ss/0.05,2))+2);
            fCass.init = 0.9953;
            fCass.diff = (fCass_inf-fCass)/tau_fCass;
         }
         subsystem L_type_Ca_current_f_gate {
            provides diffvar @gate f {1};
            f_inf {1} = 1/(1+exp((V+20)/7));
            tau_f {ms} = (1102.5*exp(-pow((V+27),2)/225)+200/(1+exp((13-V)/10))+180/(1+exp((V+30)/10))+20);
            f.init = 0.8009;
            f.diff = (f_inf-f)/tau_f;
         }
         @param g_CaL {L/s/F} = 0.0000398;
         i_CalTerm1 = 4*(V-15)*pow(F,2)/(R*T);
         i_CalTerm2 = exp(2*(V-15)*F/(R*T));
         if (V==15) {
            i_CalTerm3 = 2*F;
         } else {
            i_CalTerm3 = i_CalTerm1/(i_CalTerm2-1);
         }
         i_CalTerm4 = i_CalTerm3*i_CalTerm2;
         provides @trace i_CaL = g_CaL*d*f*f2*fCass*(0.25*Ca_ss*i_CalTerm4-Ca_o*i_CalTerm3);
         provides accum i_Caitot += i_CaL;
      }
      subsystem calcium_pump_current {
         K_pCa {mmol/L} = 0.0005;
         @param g_pCa {pA/pF} = 0.1238;
         provides @trace i_p_Ca {pA/pF} = g_pCa*Ca_i/(Ca_i+K_pCa);
         provides accum i_Caitot += i_p_Ca;
      }
      subsystem sodium_calcium_exchanger_current {
         K_NaCa {pA/pF} = 1000;
         K_sat {1} = 0.1;
         Km_Ca {mmol/L} = 1.38;
         Km_Nai {mmol/L} = 87.5;
         alpha {1} = 2.5;
         gamma {1} = 0.35;
         provides @trace i_NaCa {pA/pF} = K_NaCa*(exp(gamma*V*F/(R*T))*pow(Na_i,3)*Ca_o-exp((gamma-1)*V*F/(R*T))*pow(Na_o,3)*Ca_i*alpha)/((pow(Km_Nai,3)+pow(Na_o,3))*(Km_Ca+Ca_o)*(1+K_sat*exp((gamma-1)*V*F/(R*T))));
         provides accum i_Naitot += 3*i_NaCa;
         provides accum i_Caitot -= 2*i_NaCa;
      }
      subsystem calcium_background_current {
         E_Ca {mV} = 0.5*R*T/F*log(Ca_o/Ca_i);
         @param g_bca {nS/pF} = 0.000592;
         provides @trace i_b_Ca {pA/pF} = g_bca*(V-E_Ca);
         provides accum i_Caitot += i_b_Ca;
      }
      Buf_c {mmol/L} = 0.2;
      Buf_sr {mmol/L} = 10;
      Buf_ss {mmol/L} = 0.4;
      EC {mmol/L} = 1.5;
      K_buf_c {mmol/L} = 0.001;
      K_buf_sr {mmol/L} = 0.3;
      K_buf_ss {mmol/L} = 0.00025;
      K_up {mmol/L} = 0.00025;
      V_leak {1/ms} = 0.00036;
      V_rel {1/ms} = 0.102;
      V_sr {um^3} = 0.001094;
      V_ss {um^3} = 0.00005468;
      V_xfer {1/ms} = 0.0038;
      Vmax_up {mmol/L/ms} = 0.006375;
      k1_prime {L^2/mmol^2/ms} = 0.15;
      k2_prime {L/mmol/ms} = 0.045;
      k3 {1/ms} = 0.06;
      k4 {1/ms} = 0.005;
      max_sr {1} = 2.5;
      min_sr {1} = 1;
      Ca_i_bufc {1} = 1/(1+Buf_c*K_buf_c/pow((Ca_i+K_buf_c),2));
      Ca_sr_bufsr {1} = 1/(1+Buf_sr*K_buf_sr/pow((Ca_SR+K_buf_sr),2));
      Ca_ss_bufss {1} = 1/(1+Buf_ss*K_buf_ss/pow((Ca_ss+K_buf_ss),2));
      @trace i_leak {mmol/L/ms} = V_leak*(Ca_SR-Ca_i);
      @trace i_up {mmol/L/ms} = Vmax_up/(1+pow(K_up,2)/pow(Ca_i,2));
      @trace i_xfer {mmol/L/ms} = V_xfer*(Ca_ss-Ca_i);
      kcasr {1} = (max_sr-(max_sr-min_sr)/(1+pow(EC/Ca_SR,2)));
      Ca_i.init = 0.00013;
      Ca_i.diff = Ca_i_bufc*(((i_leak-i_up)*V_sr/V_c+i_xfer)-1*((i_b_Ca+i_p_Ca)-2*i_NaCa)*Cm/(2*1*V_c*F));
      k1 {L^2/mmol^2/ms} = k1_prime/kcasr;
      k2 {L/mmol/ms} = k2_prime*kcasr;
      O {1} = k1*pow(Ca_ss,2)*R_prime/(k3+k1*pow(Ca_ss,2));
      R_prime.init = 0.9068;
      R_prime.diff = (-k2*Ca_ss*R_prime+k4*(1-R_prime));
      @trace i_rel {mmol/L/ms} = V_rel*O*(Ca_SR-Ca_ss);
      Ca_SR.init = 3.715;
      Ca_SR.diff = Ca_sr_bufsr*(i_up-(i_rel+i_leak));
      Ca_ss.init = 0.00036;
      Ca_ss.diff = Ca_ss_bufss*((-1*i_CaL*Cm/(2*1*V_ss*F)+i_rel*V_sr/V_ss)-i_xfer*V_c/V_ss);
   }
   provides accum Iion += i_Naitot+i_Kitot+i_Caitot;
}
